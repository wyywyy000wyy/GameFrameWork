---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by weizheng.
--- DateTime: 2023/1/4 13:39
--- 特效特效播放器
GN.NS_mgr_effect = GN.NS_mgr_effect or {}
local NS_mgr_effect = GN.NS_mgr_effect
NS_mgr_effect.HangingType = NS_mgr_effect.HangingType or CS.BattleEffectConfig.HangingType
local HangingType = NS_mgr_effect.HangingType

local LuaHelper = CS.Hugula.Utils.LuaHelper

local ResLoader = CS.Hugula.ResLoader
local PoolManager = CS.CDL2.Utility.PoolManager
local Sequence = CS.DG.Tweening.DOTween.Sequence
local Quaternion = CS.UnityEngine.Quaternion
local Vector3 = CS.UnityEngine.Vector3

local ParticleSystem_type = typeof(CS.UnityEngine.ParticleSystem)
local BattleEffectConfig_type = typeof(CS.BattleEffectConfig)
local SpecifyLineStartAndEnd_type = typeof(CS.SpecifyLineStartAndEnd)
local HangingPoint_type = typeof(CS.BattleHangingPoint)
local AngerSkillBrightened_type = typeof(CS.AngerSkillBrightened)
local MoveType = CS.BattleEffectConfig.MoveType
-- NS_mgr_effect.mgr_effect = NS_mgr_effect.mgr_effect or {}
local mgr_effect = class2("mgr_effect", function(self)
end)

mgr_effect.cf = mgr_effect.cf or {}

function mgr_effect.get_cache_effect(effect_path)
    -- local pool = mgr_effect.cf[effect_path]
    -- if pool and #pool > 0 then
    --     return table.remove(pool)
    -- end
    return nil
end

function mgr_effect.cache_effect(effect_path, eff_obj)
    g_release_asset(effect_path, eff_obj)
    if 1 then
        return
    end
    local pool = mgr_effect.cf[effect_path]
    if not pool then
        pool = {}
        mgr_effect.cf[effect_path] = pool
    end
    eff_obj.transform.position = E.Vector3(0, -1000, 0)
    table.insert(pool, eff_obj)
end

function mgr_effect.clear_cache_effect()
    for k, v in pairs(mgr_effect.cf) do
        for i = 1, #v do
            local eff_obj = v[i]
            if not LuaHelper.IsNull(eff_obj) then
                g_release_asset(k, eff_obj)
            end
        end
    end
    mgr_effect.cf = {}
end




-- g_rpg_eff_root = g_rpg_eff_root or nil
-- if not g_rpg_eff_root then
--     local go = E.GameObject("g_rpg_eff_root")
--     go.name = "g_rpg_eff_root"
--     g_rpg_eff_root = go.transform
-- end

-- 删除特效
local function destroy(effect_ins)
    if effect_ins.destroyed == false and not LuaHelper.IsNull(effect_ins.obj) then
        if effect_ins.form_pool == true then
            mgr_effect.cache_effect(effect_ins.path, effect_ins.obj)
        else
            ResLoader.ReleaseInstance(effect_ins.obj);
        end
    end

    if effect_ins.sq ~= nil then
        effect_ins.sq:Kill()
    end
    
    effect_ins.destroyed = true
end

-- 设定是否自动删除特效
local function set_auto_destroy(effect_ins, is_auto_destroy)
    effect_ins.is_auto_destroy = is_auto_destroy
    return effect_ins
end

g_ignore_effs = {
    -- ["ef_dgl_rpg_spec1_hit01_low"] = true,
    ["ef_dgl_rpg_attack_hit"] = true,
}

-- 对象池 加载特效资源
local function load_res(effect_ins, load_callback)
    -- if g_close_eff then
    --     return
    -- end
    effect_ins.loading = true
    local effect_name = effect_ins.path
    -- if g_ignore_effs[effect_name] then
    --     return
    -- end
    local end_cb = function(path, obj)
        effect_ins.loading = false
        effect_ins.form_pool = true

        if effect_ins.destroyed then
            mgr_effect.cache_effect(effect_name, obj)
            return
        end
        -- obj.gameObject.transform:SetParent(g_rpg_eff_root, false)

        if effect_ins.ignore_camera_mask then
            obj:AddComponent(AngerSkillBrightened_type)
        end
        
        effect_ins.obj = obj
        effect_ins.name = effect_name
        local cfg = obj:GetComponent(BattleEffectConfig_type)
        effect_ins.cfg = cfg
        -- effect_ins.particles = obj:GetComponentsInChildren(ParticleSystem_type);
        -- obj:SetActive(false)
        -- obj:SetActive(true)
        if load_callback ~= nil then
            load_callback(obj)
        end
    end
    if effect_ins.obj ~= nil then
        if effect_name == effect_ins.name then
            end_cb(nil, nil, effect_ins.obj)
            return
        end
        mgr_effect.cache_effect(effect_ins.name, effect_ins.obj)
        effect_ins.name = nil
        effect_ins.obj = nil
    end

    local cache_eff = mgr_effect.get_cache_effect(effect_name)
    if cache_eff then
        end_cb(nil, effect_name, cache_eff)
        return
    end

    g_load_asset(
            effect_name,
            end_cb)
end

----------------------- 特效播放方式 begin --------------------
-- 在一个固定位置播放特效
local function play(effect_ins, pos, dir, avatar_height, delay)
    if not effect_ins or effect_ins.destroyed or effect_ins.loading then
        return effect_ins
    end

    load_res(effect_ins, function(obj)
        local trans = obj.transform

        -- BattleEffectConfig 中记录了特效播放的时间节点，以及生命周期长度
        local cfg = effect_ins.cfg --obj:GetComponent(BattleEffectConfig_type)
        if not cfg.fixedRotation and dir then
            trans.rotation = Quaternion.LookRotation(dir)
        end

        local offset_y = 0
        if cfg.hangingType ~= HangingType.None then
            avatar_height = avatar_height or 0
            if cfg.hangingType == HangingType.Head then
                offset_y = avatar_height
            elseif cfg.hangingType == HangingType.Body then
                offset_y = avatar_height / 2
            elseif cfg.hangingType == HangingType.Foot then
                offset_y = 0
            end
        end

        trans.position = pos + E.Vector3(0, offset_y, 0)

        effect_ins.sq = Sequence()
        local sq = effect_ins.sq
        sq.timeScale = effect_ins.time_scale

        local delay_time = delay or cfg.delayTime
        if delay_time > 0 then
            -- 延迟显示
            obj:SetActive(false)
            sq:AppendInterval(delay_time)
            sq:AppendCallback(function()
                obj:SetActive(true)
            end)
        end

        if cfg.playTime > 0 then
            sq:AppendInterval(cfg.playTime)
        end
        if cfg.keepTime > 0 then
            -- 延迟移除
            sq:AppendInterval(cfg.keepTime)
        end

        sq:AppendCallback(function()
            if effect_ins.is_auto_destroy then
                destroy(effect_ins)
            end
        end)
    end)

    return effect_ins
end

-- 播放一个从固定位置飞向固定位置的特效
local function fly(effect_ins, start_pos, end_pos, speed, fly_height)
    if not effect_ins or effect_ins.destroyed or effect_ins.loading then
        return effect_ins
    end

    if not start_pos or not end_pos or speed <= 0 then
        return effect_ins
    end

    load_res(effect_ins, function(obj)
        local trans = obj.transform
        trans.position = start_pos

        -- BattleEffectConfig 中记录了特效播放的时间节点，以及生命周期长度
        local cfg = effect_ins.cfg --obj:GetComponent(BattleEffectConfig_type)

        effect_ins.sq = Sequence()
        local sq = effect_ins.sq
        sq.timeScale = effect_ins.time_scale

        if cfg.delayTime > 0 then
            -- 延迟显示
            obj:SetActive(false)
            sq:AppendInterval(cfg.delayTime)
            sq:AppendCallback(function()
                obj:SetActive(true)
            end)
        end

        local move_vec = end_pos - start_pos
        local distance = move_vec.magnitude
        local during = distance / speed

        if fly_height ~= nil and fly_height > 0 then
            -- 抛物线
            trans.rotation = Quaternion.LookRotation(Vector3(0, fly_height * distance * 12, 0) + move_vec)
            trans:DORotateQuaternion(Quaternion.LookRotation(Vector3(0, fly_height * distance * -12, 0) + move_vec), during)
            sq:Append(trans:DOJump(start_pos + move_vec, fly_height * distance, 1, during))
        else
            trans.rotation = Quaternion.LookRotation(move_vec)
            sq:Append(trans:DOMove(end_pos, during))
        end

        if cfg.keepTime > 0 then
            -- 延迟移除
            sq:AppendInterval(cfg.keepTime)
        end

        sq:AppendCallback(function()
            if effect_ins.is_auto_destroy then
                destroy(effect_ins)
            end
        end)        
    end)

    return effect_ins
end

-- 跟随目标移动
local function follow(effect_ins, follow_trans, avatar_height)
    if not effect_ins or effect_ins.destroyed or effect_ins.loading then
        return effect_ins
    end

    load_res(effect_ins, function(obj)
        if follow_trans ~= nil then
            local trans = obj.transform

            -- BattleEffectConfig 中记录了特效播放的时间节点，以及生命周期长度
            local cfg = effect_ins.cfg --obj:GetComponent(BattleEffectConfig_type)

            local offset_y = 0
            if cfg.hangingType ~= HangingType.None then
                if cfg.hangingType == HangingType.Head then
                    offset_y = avatar_height
                elseif cfg.hangingType == HangingType.Body then
                    offset_y = avatar_height / 2
                elseif cfg.hangingType == HangingType.Foot then
                    offset_y = 0
                end
            end

            effect_ins.follow_trans = follow_trans
            effect_ins.follow_offset = E.Vector3(0, offset_y, 0)

            trans.position = follow_trans.transform.position + effect_ins.follow_offset
            if not cfg.fixedRotation then
                trans.rotation = follow_trans.transform.rotation
            end

        else
            destroy(effect_ins)
        end
    end)

    return effect_ins
end

-- 跟随目标移动,会自动删除
local function auto_destroy_follow(effect_ins, follow_trans, avatar_height)
    if not effect_ins or effect_ins.destroyed or effect_ins.loading then
        return effect_ins
    end

    load_res(effect_ins, function(obj)
        if follow_trans ~= nil then
            local trans = obj.transform

            -- BattleEffectConfig 中记录了特效播放的时间节点，以及生命周期长度
            local cfg = effect_ins.cfg --obj:GetComponent(BattleEffectConfig_type)
            
            local offset_y = 0
            if cfg.hangingType ~= HangingType.None then
                if cfg.hangingType == HangingType.Head then
                    offset_y = avatar_height
                elseif cfg.hangingType == HangingType.Body then
                    offset_y = avatar_height / 2
                elseif cfg.hangingType == HangingType.Foot then
                    offset_y = 0
                end
            end

            effect_ins.follow_trans = follow_trans
            effect_ins.follow_offset = E.Vector3(0, offset_y, 0)

            trans.position = follow_trans.transform.position + effect_ins.follow_offset
            if not cfg.fixedRotation then
                effect_ins.follow_ratation  = true
                trans.rotation = follow_trans.transform.rotation
            end

            effect_ins.sq = Sequence()
            local sq = effect_ins.sq
            sq.timeScale = effect_ins.time_scale

            if cfg.delayTime > 0 then
                -- 延迟显示
                obj:SetActive(false)
                sq:AppendInterval(cfg.delayTime)
                sq:AppendCallback(function()
                    obj:SetActive(true)
                end)
            end
            if cfg.playTime > 0 then
                sq:AppendInterval(cfg.playTime)
            end
            if cfg.keepTime > 0 then
                -- 延迟移除
                sq:AppendInterval(cfg.keepTime)
            end

            sq:AppendCallback(function()
                if effect_ins.is_auto_destroy then
                    destroy(effect_ins)
                end
            end)            
        else
            destroy(effect_ins)
        end
    end)

    return effect_ins
end

-- 在身体的Body位置播放特效(受击特效的额外处理)
local function play_hit_effect(effect_ins, follow_trans, avatar_height, body_trans, dir)
    if not effect_ins or effect_ins.destroyed or effect_ins.loading then
        return effect_ins
    end

    load_res(effect_ins, function(obj)
        if follow_trans ~= nil then
            local trans = obj.transform
            ----http://10.23.0.3:8081/browse/L2NEW-1102 拖尾特效显示会有问题
            -- obj:SetActive(false)
            -- obj:SetActive(true)
            -- BattleEffectConfig 中记录了特效播放的时间节点，以及生命周期长度
            local cfg = effect_ins.cfg --obj:GetComponent(BattleEffectConfig_type)
            effect_ins.follow_offset = E.Vector3.zero

            if cfg.hangingType == HangingType.Head then
                effect_ins.follow_offset.y = avatar_height
                trans.position = follow_trans.transform.position + effect_ins.follow_offset
            elseif cfg.hangingType == HangingType.Body then
                if body_trans == nil then
                    effect_ins.follow_offset.y = avatar_height / 2
                    trans.position = follow_trans.transform.position + effect_ins.follow_offset
                else
                    trans.position = body_trans.transform.position
                end
            elseif cfg.hangingType == HangingType.Foot or cfg.hangingType == HangingType.None then
                trans.position = follow_trans.transform.position
            end

            if cfg.moveType == MoveType.Stay or cfg.moveType == MoveType.StayTarget then
                if cfg.hangingType == HangingType.Head or cfg.hangingType == HangingType.Foot then
                    effect_ins.follow_trans = follow_trans
                elseif cfg.hangingType == HangingType.Body then
                    if body_trans == nil then
                        effect_ins.follow_trans = follow_trans
                    else
                        effect_ins.follow_trans = body_trans
                    end
                end
            end

            if not cfg.fixedRotation then
                trans.rotation = dir and E.Quaternion.LookRotation(dir) or follow_trans.transform.rotation
            end

            effect_ins.sq = Sequence()
            local sq = effect_ins.sq
            sq.timeScale = effect_ins.time_scale

            if cfg.delayTime > 0 then
                -- 延迟显示
                obj:SetActive(false)
                sq:AppendInterval(cfg.delayTime)
                sq:AppendCallback(function()
                    obj:SetActive(true)
                end)
            end
            if cfg.playTime > 0 then
                sq:AppendInterval(cfg.playTime)
            end
            if cfg.keepTime > 0 then
                -- 延迟移除
                sq:AppendInterval(cfg.keepTime)
            end

            sq:AppendCallback(function()
                if effect_ins.is_auto_destroy then
                    destroy(effect_ins)
                end
            end)            
        else
            destroy(effect_ins)
        end
    end)

    return effect_ins
end

-- 将两个GameObject通过特效连接起来
local function line(effect_ins, start_obj, end_obj, start_offset_Y, end_offset_y)
    if not effect_ins or effect_ins.destroyed or effect_ins.loading then
        return effect_ins
    end

    load_res(effect_ins, function(obj)
        if end_obj ~= nil then
            local trans = obj.transform

            -- BattleEffectConfig 中记录了特效播放的时间节点，以及生命周期长度
            local specify_line_eff = obj:GetComponentInChildren(SpecifyLineStartAndEnd_type)

            if not LuaHelper.IsNull(specify_line_eff) then
                specify_line_eff.startPoint = start_obj
                specify_line_eff.startOffsetY = start_offset_Y or 0
                
                specify_line_eff.endPoint = end_obj                
                specify_line_eff.endOffsetY = end_offset_y or 0
            else
                effect_ins.follow_trans = end_obj.transform
                if effect_ins.follow_offset then
                trans.position = end_obj.transform.position + effect_ins.follow_offset
                end
            end
        else
            destroy(effect_ins)
        end
    end)

    return effect_ins    
end

----------------------- 特效播放方式 end --------------------
local function update(effect_ins, ms_dt)
    if effect_ins.destroyed then
        return
    end
    
    -- 如果有跟随目标，每帧更新位置
    if effect_ins.follow_trans ~= nil and effect_ins.obj ~= nil then
        if effect_ins.follow_offset ~= nil then
            effect_ins.obj.transform.position = effect_ins.follow_trans.position + effect_ins.follow_offset
        else
            effect_ins.obj.transform.position = effect_ins.follow_trans.position
        end

        -- if effect_ins.follow_ratation then
        --     effect_ins.obj.transform.rotation = effect_ins.follow_trans.rotation
        -- end
    end
end
-- local Profiler = CS.UnityEngine.Profiling.Profiler

-- 特效播放速度
local function set_time_scale(effect_ins, time_scale)
    if effect_ins.destroyed then
        return
    end
    
    -- Profiler.BeginSample("set_time_scale")

    effect_ins.time_scale = time_scale

    -- dotween播放速度
    if effect_ins.sq ~= nil then
        -- Profiler.BeginSample("dotween")
        effect_ins.sq.timeScale = time_scale
        -- Profiler.EndSample()
    end

    if effect_ins.cfg == nil then
        -- Profiler.EndSample()
        return
    end

    effect_ins.cfg:SetTimeScale(time_scale)
    local pause = time_scale <= 0
    -- 粒子播放速度
    -- if effect_ins.particles ~= nil then
    --     for i = 0, effect_ins.particles.Length - 1, 1 do
    --         -- if effect_ins.particles[i] then
    --         --     Profiler.BeginSample("main")
    --         --     local main = effect_ins.particles[i].main
    --         --     Profiler.BeginSample("simulationSpeed")
    --         --     main.simulationSpeed = time_scale
    --         --     Profiler.EndSample()
    --         --     Profiler.EndSample()
    --         -- end
    --         local particleSystem = effect_ins.particles[i]
    --         local a = 1
    --         a = 2
    --         -- Profiler.BeginSample("main")
    --         -- if pause then
    --         --     particleSystem:Pause(true)
    --         -- else
    --         --     particleSystem:Play(true)
    --         -- end
    --         -- Profiler.EndSample()
    --     end
    -- end
    -- Profiler.EndSample()
end

function mgr_effect.create_effect(effect_path,ignore_camera_mask)
    local effect_ins = {}
    effect_ins.path = effect_path
    effect_ins.time_scale = 1   -- 特效的time_scale
    effect_ins.obj = nil   -- 实例化出来的特效
    effect_ins.particles = nil   -- 实例化出来的特效
    effect_ins.sq = nil   -- 正在执行的dotween动画
    effect_ins.is_auto_destroy = true   -- 是否自动删除
    effect_ins.destroyed = false    -- 已否已经被删除了
    effect_ins.loading = false    -- 是否正在加载资源
    effect_ins.follow_trans = nil    -- 跟随移动的目标
    effect_ins.follow_offset = nil    -- 跟随移动的目标的偏移
    effect_ins.ignore_camera_mask = ignore_camera_mask  -- 是否忽略摄像机的遮罩
    effect_ins.follow_ratation = false
    effect_ins.play = play
    effect_ins.fly = fly
    effect_ins.follow = follow
    effect_ins.auto_destroy_follow = auto_destroy_follow
    effect_ins.play_hit_effect = play_hit_effect
    effect_ins.line = line

    --effect_ins.update_pos = update_pos
    --effect_ins.update_dir = update_dir

    effect_ins.update = update
    effect_ins.destroy = destroy
    effect_ins.set_time_scale = set_time_scale
    effect_ins.set_auto_destroy = set_auto_destroy

    return effect_ins
end

return mgr_effect