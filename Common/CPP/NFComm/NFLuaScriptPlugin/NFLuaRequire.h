#ifndef LUA_REQUIRE_H
#define LUA_REQUIRE_H

#include "Dependencies/LuaIntf/LuaIntf/LuaIntf.h"
#include "Dependencies/LuaIntf/LuaIntf/LuaRef.h"
namespace LuaIntf
{
	LUA_USING_SHARED_PTR_TYPE(std::shared_ptr)
}

class NFILuaScriptModule;

#define NF_PROPERTY(TYPE, PN) \
	TYPE Get##PN() const { return PN; } \
	void Set##PN(const TYPE& value) { PN = value; } \
	TYPE PN;


#define NF_LUA_PROPERTY(TYPE, __PN) addProperty(#__PN, &TYPE::Get##__PN, &TYPE::Set##__PN)


//#define LUA_MODULE_FUNC_DEFINE2(FUNCTION_NAME, RETURN_TYPE, TYPE1, VALUE1, TYPE2, VALUE2) \
//	RETURN_TYPE FUNCTION_NAME(TYPE1 VALUE1, TYPE2 VALUE2);

#define LUA_MODULE_FUNC_DEFINE2(FUNCTION_NAME, RETURN_TYPE, TYPE1, VALUE1, TYPE2, VALUE2) \
	RETURN_TYPE FUNCTION_NAME_(TYPE1 VALUE1, TYPE2 VALUE2);\
	LuaIntf::LuaRef FUNCTION_NAME##Wrapper_; \
	RETURN_TYPE FUNCTION_NAME(TYPE1 VALUE1, TYPE2 VALUE2);\

#define LUA_MODULE_FUNC_IMGL2(FUNCTION_NAME, RETURN_TYPE, TYPE1, VALUE1, TYPE2, VALUE2) \
RETURN_TYPE LUA_MODULE_CLASS::FUNCTION_NAME(TYPE1 VALUE1, TYPE2 VALUE2)\
{ \
	if (FUNCTION_NAME##Wrapper_.isFunction()) \
	{ \
		return FUNCTION_NAME##Wrapper_.call<RETURN_TYPE>(VALUE1, VALUE2); \
	} \
	return FUNCTION_NAME_(VALUE1, VALUE2);\
}\
RETURN_TYPE LUA_MODULE_CLASS::FUNCTION_NAME_(TYPE1 VALUE1, TYPE2 VALUE2)\



#define LUA_MODULE_REGISTER(FUNCTION_NAME) \
	.addFunction(#FUNCTION_NAME, &LUA_MODULE_CLASS::FUNCTION_NAME)\
	.addVariableRef(#FUNCTION_NAME"Wrapper_", &LUA_MODULE_CLASS::FUNCTION_NAME##Wrapper_, true)\

#endif