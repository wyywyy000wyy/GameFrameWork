---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by zheng.wei
--- DateTime: 2023/1/4 10:19
--- 战斗常量定义

local min = math.min
local max = math.max

 
function NONE_LOG()
end

RPG_LOG = function(format, ...)
    INFO(string.format(format, ...))
end
RPG_DEBUG = function(format, ...)
    INFO(string.format(format, ...))
end
RPG_ERR = ERROR
RPG_DEBUG_MOD = false
RPG_DEBUG_VIEW_MOD = false
RPG_DEBUG_CHECK = false
RPG_DEBUG_WRAPPER = false

-- RPG_LOG = NONE_LOG
-- RPG_DEBUG = NONE_LOG
-- RPG_ERR = NONE_LOG
RPG_DEBUG_MOD = true
RPG_DEBUG_CHECK = false
RPG_DEBUG_VIEW_MOD = true
RPG_DEBUG_WRAPPER = true

RPG_DEFAULT_LEVEL_ID = 10209

RPG_SAVE_BATTLE_DATA = G_IN_EDITOR and true or false
RPG_DEBUG_DAMAGE_ONE = 1000--nil --1000

RPG_SKILL_TYPE = {
    NORMAL = 1, --普攻
    ACTIVE = 2, --主动技能
    PASSIVE = 3, --被动技能
    ANGER = 4, -- 怒气技能
}

RPG_EFFECT_ACTOR = {
    SKILL = 1,
    BUFF = 2,
    BULLET = 3
}

RPG_EFFECT_ACTOR_FORBID = {
    SKILL = {"ATTR"},
    BUFF = {},
    BULLET = {"ATTR"},
}

----基类加新函数 子类不会新加 有BUG 得改wyy
T = T or {}
function class2(pre, base, _ctor)

    local c
    if type(pre) =="string" then
        c= T[pre] or {}
        T[pre] = c
    else
        c= pre or {} -- a new class instance
    end
    if not _ctor and type(base) == "function" then
        _ctor = base
        base = nil
    elseif type(base) == "table" then
        -- our new class is a shallow copy of the base class!
        for i, v in pairs(base) do
            if type(v) ~= "function" then
                c[i] = v
            end
        end
        c._base = base
    end

    if type(pre) =="string" then
        c._cls_name = pre
        pre = T[pre]
    end
    -- the class will be the metatable for all its objects,
    -- and they will look up their methods in it.
    c.__index = c

    -- expose a constructor which can be called by <classname>(<args>)
    local mt = pre and getmetatable(pre) or {}

    if type(base) == "table" then
        mt.__index = base
    end
    mt.__call = function(class_tbl, ...)
        local obj = {}
        setmetatable(obj, c)

        if _ctor then
            _ctor(obj, ...)
        end
        return obj
    end

    c._ctor = _ctor
    c.is_a = function(self, klass)
        local m = getmetatable(self)
        while m do
            if m == klass then
                return true
            end
            m = m._base
        end
        return false
    end
    setmetatable(c, mt)
    return c
end

function class_rpg(class_name, base, _ctor)
    local c = class2(class_name, base, _ctor)
    c.debug = c.debug or {}
    local debug_ = c.debug
    local wrapper_mt = {
        __index = function(t, k)
            local v = t._obj[k]
            if type(v) == "function" then
                local pre_hook = debug_[k .. "_pre"]
                local post_hook = debug_[k]
                if pre_hook or post_hook then
                    local wrapper_func = v
                    v = function(...)
                        if pre_hook then
                            pre_hook(...)
                        end
                        local ret = {wrapper_func(...)}
                        if post_hook then
                            post_hook(...)
                        end
                        return unpack(ret)
                    end
                end
            end
            return v
        end,
        __newindex = function(t, k, v)
            t._obj[k] = v
        end,
    }
    local mt = getmetatable(c)
    mt.__call = function(class_tbl, ...)
        local class_ = c
        local obj = {}
        setmetatable(obj, class_)
        
        if RPG_DEBUG_WRAPPER and not is_server() then
            local wrapper = {
                _obj = obj,
            }
            setmetatable(wrapper, wrapper_mt)
            obj = wrapper
        end

        if c._ctor then
            c._ctor(obj, ...)
        end
        return obj
    end
    return c
end

-- 战斗执行模式
RPG_RUN_TYPE = {
    CLIENT = 1, -- 带AI、战斗模拟、客户端播放
    CALCULATE = 2, -- 只带、战斗模拟
    REPLAY = 3, -- 战斗回放
    -- 编辑器模拟战斗
}

-- RPG_ACTION_TYPE = {
--     WAIT = 1,
--     MOVE = 2,
--     SKILL = 3,
--     -- ANGER_SKILL = 4,
-- }

RPG_STACK_TYPE = {
    Default = 1, ----效果叠加
    Grade = 2, ----层数叠加
    Time = 3, ----时间叠加
    REPLACE = 4, ----替换
}

RPG_OBJECT_TYPE = {
    SKILL = 1,
    BUFF = 2
}

RPG_SKILL_INTERRUPT_TYPE = {
    INTERRUPT_AND_CAST = 1,        -----------------吟唱被打断并且继续释放
    INTERRUPT = 2, --------------------吟唱被打断 技能直接中断
    NOT_INTERRUPT = 3, --------------------吟唱过程中不可被打断·
}

RPG_RECORD_TYPE = {
    DAMAGE = 1, -----------------收到的伤害
}

RPG_EVENT_TYPE = {

    -- 战斗场景事件
    BATTLE_DATA_INIT = 1000, -- 战斗初始化
    BATTLE_START = 1001, -- 开始
    BATTLE_END = 1002, -- 结束

    BATTLE_EVENT_BEGIN = 0,
    -- ENTITY事件
    BORN = 1, -- 角色生成
    SKILL_START = 2, -- 技能
    SKILL_END = 3, -- 技能
    DAMAGE = 4, -- 伤害
    BUFF = 5, -- BUFF表现
    BUFF_END = 6, -- BUFF表现
    --INTERRUPT = 6, -- 技能被打断
    MOVE = 7, -- 移动
    DEAD = 8, -- 死亡
    
    BULLET = 10,
    BULLET_END = 11,
    PROPS_CHANGED = 12,
    PROP_CHANGE = 13,
    EFFECT = 14,
    SHIELD = 15, -- 护盾
    SKILL_ANGER = 16, -- 技能回怒
    BATTLE_PAUSE = 17,
    DEBUG_EVENT = 18,
    BATTLE_EVENT_END = 19,
    EVENT_DEFAULT = 9999,

    ---战斗action
    BATTLE_ACTION_BEGIN = 10000,
    ACTION_WAIT = 10000,
    ACTION_MOVE = 10001,
    ACTION_SKILL = 10002,
    ACTION_SKILL_ANGER = 10003,
    BATTLE_ACTION_END = 10003,

}

RPG_ETY_TYPE = {
    HERO = 1,
    PET = 2,
}

RPG_HERO_TYPE = {
    HERO = 1,
    BOSS = 2,
}

_RPG_CMD = {
    "ATTACK",   ---------普攻攻击
    "SKILL",---------物理技能
    "MAGIC",---------魔法
    "ANGER",-------- 怒气技能
    "MOVE", ----------移动

    -----------------------EFFECT-----------------,  现在先不实现 有需求了再实现
    -- "FORCE_MOVE",
    -- "DAMAGE",
    -- "BULLET",
} 
RPG_CMD = {}
for i, v in ipairs(_RPG_CMD) do
    RPG_CMD[v] = i
end

-----伤害类型分类
RPG_DAMAGE_CATEGROTY = {
    SKILL_TYPE = 1, ---按技能类型分 （普攻，魔法，物理，怒气）
    DAMAGE_TYPE = 2, ---按伤害类型分 （物理，魔法，真实）
}

RPG_DEFAULT_GROUP = {
    NONE = 0, ----------
    BUFF = 1,  ----------增益group
    DEBUFF = 2, -----------减益group
    CONTROL = 3, -----------控制group
    DOT = 4, -----------控制group



    -- BLOOD = 1, -- 流血
    -- POISONED = 2, -- 中毒
    -- BURNING = 4, -- 灼烧
    
    -- CONTROL_BEGIN = 10, ----------------弱控制
    SILENCE = 10, -- 沉默
    TAUNT = 11, --嘲讽
    -- FORCE_CONTROL_BEGIN = 13, -- 强控制
    -- SLOW = 13, -- 减速
    FEAR = 15, -- 恐惧
    STUN = 17, -- 眩晕   parent = CONTROL
    DOWN = 18, --击倒
    FORCE_MOVE = 19, -- 强制位移 击退
    FROZEN = 20, --冰冻
    -- CONTROL_END = 29,
    -- DEBUFF_END = 29,------------debuff

    TRANSFORM = 26, --变身
    ENDURE = 27, --霸体 免疫除了 FROZEN之外的控制
    IMMUNE = 28, --免疫  强控制
    IMMORTAL = 29, -- 无敌 
    UNSELECTABLE = 30, --不能选中
    DEAD = 31, -- 死亡
}

RPG_GROUP_LIMIT_BITS = RPG_GROUP_LIMIT_BITS or {}

_RPG_GROUP_LIMIT_BITS = {
    [RPG_DEFAULT_GROUP.FORCE_MOVE] = {"ATTACK", "SKILL", "ANGER", "MOVE"},
    -- [RPG_DEFAULT_GROUP.TAUNT] = {"SKILL", "ANGER", "MOVE"},
}


function RPG_BUILD_RPG_GROUP_CMDS()
    RPG_GROUP = RPG_GROUP or {}
    for k, gid in pairs(RPG_DEFAULT_GROUP) do
        if RPG_GROUP[gid] then
            -- RPG_ERR("[RPG] RPG_GROUP 和 RPG_DEFAULT_GROUP 冲突 group=%s %s", gid, k)
        end
        RPG_GROUP[gid] = _RPG_GROUP_LIMIT_BITS[gid] or RPG_GROUP_LIMIT_BITS[gid]
    end
    RPG_GROUP_CMDS = RPG_GROUP_CMDS or {}
    for gid, nt in pairs(RPG_GROUP) do
        local t = {}
        for _, cmd in ipairs(nt) do
            table.insert(t, RPG_CMD[cmd])
        end
        RPG_GROUP_CMDS[gid] = t
    end
end
RPG_BUILD_RPG_GROUP_CMDS()

-- RPG_ETY_GROUP = RPG_ETY_GROUP or {}
-- for groupName, groupId in pairs(RPG_ETY_STATUS_ID) do
--     RPG_ETY_GROUP[groupId] = groupName
-- end


-- NOT_ATTACK
-- NOT_SKILL
-- NOT_MOVE


-- GROUP1 = {
--     GROUP1 = NOT_ATTACK | NOT_SKILL,
--     GROUP1 = NOT_ATTACK | NOT_MOVE,
-- }

RPG_ETY_INNER_BUFF = {
    FORCE_ID = 1, ----------强制位移
    TAUNT_ID = 2, ----------嘲讽
    TRANSFORM_ID = 27, ----------变身
    -- RELIVE = 2,---复活BUFF
    MAX_ID = 100
}

RPG_CONTROL_LV = {
    LV1 = 0x1000,
    LV2 = 0x2000,
    LV3 = 0x3000,
    LV4 = 0x4000,
    LV5 = 0x5000,
}

RPG_ETY_STATUS = {}
for status, id in pairs(RPG_DEFAULT_GROUP) do
    RPG_ETY_STATUS[status] = bit.lshift(1, id)
end

RPG_EVENT_TYPE_STR = {
    [RPG_EVENT_TYPE.BATTLE_DATA_INIT] = "战斗初始化",
    [RPG_EVENT_TYPE.BATTLE_START] = "战斗开始",
    [RPG_EVENT_TYPE.BATTLE_END] = "战斗结束",
    [RPG_EVENT_TYPE.BORN] = "角色出生",
    [RPG_EVENT_TYPE.SKILL_START] = "技能开始",
    [RPG_EVENT_TYPE.SKILL_END] = "技能结束",
    [RPG_EVENT_TYPE.DAMAGE] = "伤害",
    [RPG_EVENT_TYPE.BUFF] = "BUFF",
    [RPG_EVENT_TYPE.MOVE] = "移动",
    [RPG_EVENT_TYPE.DEAD] = "死亡",
    [RPG_EVENT_TYPE.BULLET] = "发射子弹",
    [RPG_EVENT_TYPE.BULLET_END] = "子弹结束",
    [RPG_EVENT_TYPE.PROPS_CHANGED] = "属性同步",
}

RPG_EVENT_TYPE2 = {}
for k, v in pairs(RPG_EVENT_TYPE) do
    RPG_EVENT_TYPE2[v] = k
end

RPG_ENTITY_STATE = {
    BORN = 0,
    IDLE = 1,
    MOVE = 2,
    ATTACK = 3,
    SKILL = 4,
    CONTROLLED = 5,
    DEAD = 6,
    WIN = 7,
}

RPG_WIN_WAIT_SEC = 2.5

RPG_ENTITY_STATE2 = {}
for k, v in pairs(RPG_ENTITY_STATE) do
    RPG_ENTITY_STATE2[v] = k
end

RPG_PROPERTY = {
    "RPG_Atk",
    "RPG_Def",
    "RPG_Hp",
    "RPG_HpMax",
    "RPG_HpSp", --生命恢复速度/每秒 Recover
    "RPG_Crit", --暴击率
    "RPG_CritAnti", --抗暴击率
    "RPG_CritEnhance", --暴击伤害
    "RPG_CritReduce", --暴伤抵抗
    "RPG_Accuracy",--命中
    "RPG_Dodge",--闪避
    "RPG_Block",--格挡
    "RPG_BlockAnti",--破击/抗格挡
    "RPG_Lifesteal", --吸血
    "RPG_DamageIncrease", --物理增伤率
    "RPG_MagicIncrease", --魔法增伤率
    "RPG_DamageReduce", --物理减伤率
    "RPG_MagicReduce", --魔法减伤率
    "RPG_FinalReduce", --最终减伤率
    "RPG_FinalIncrease", --最终增伤率
    "RPG_Heal", --治疗率
    "RPG_Health", --受治疗率
    "RPG_SkillSp", --技能急速 Haste
    "RPG_AtkSp", --攻击速度
    "RPG_Sp", --移动速度
    "RPG_Dist", --射程
    "RPG_Anger",  --怒气
    -- "RPG_AngerSp",  --怒气恢复速度
    "RPG_AngerMax",  --怒气上限
    "RPG_AngerHit",  --受击回怒
    "RPG_AngerKill",  --击杀回怒

    "RPG_Race",  --种族  ---读英雄表
    "RPG_Job",  --职业  ---读英雄表
    "RPG_StarFactor",  --星级系数
    "RPG_StarValue",  --星级固定系数
    "RPG_StarEffect",  --星级效果
    "RPG_HpInit", --------------初始血量
    "RPG_AngerInit", --------------初始血量
    "RPG_Radius", --------------体型
    ----------------------------战斗内部状态----------------------
    "__________RPG_BattleInter",
    "RPG_Status",
    "RPG_Groups",
    "RPG_OID", --------------战斗唯一 object id,  用于判断是否是自己..
    "RPG_TID", --------------队伍ID
    "RPG_DIR_X",
    "RPG_DIR_Y",
    "RPG_Shield",
    "RPG_DIR",
}

RPG_PROPERTY_BATTLEINTER = '__________RPG_BattleInter'

-- Hx@2023-08-12: 宠物加给英雄的，英雄平均给宠物的属性
RPG_TEAM_ATTR = {
    'RPG_Atk',
    'RPG_Def',
    'RPG_Hp',
}

local greater_zero = function (value, pm)
    return max(0, value)
end

local greater_speed = function (value, pm)
    return max(1, value)
end

RPG_PROPERTY_RANGE = {
    RPG_Atk = greater_zero,
    RPG_Def = greater_zero,
    RPG_MigicDef = greater_zero,
    RPG_Hp = function(value, pm) return max(0, min(value, pm.RPG_HpMax)) end,
    RPG_HpMax = nil,
    RPG_HpSp = greater_zero,
    RPG_Crit = greater_zero,
    RPG_CritAnti = greater_zero,
    RPG_CritEnhance = greater_zero,
    RPG_CritReduce = greater_zero,
    RPG_Accuracy = greater_zero,
    RPG_Dodge = nil,
    RPG_Block = greater_zero,
    RPG_BlockAnti = greater_zero,
    RPG_Lifesteal = greater_zero,
    RPG_DamageIncrease = nil,
    RPG_MagicIncrease = nil,
    RPG_DamageReduce = function(value, pm) return max(-500, min(value, 500)) end,
    RPG_MagicReduce = function(value, pm) return max(-500, min(value, 500)) end,
    RPG_FinalReduce = function(value, pm) return max(-500, min(value, 500)) end,
    RPG_FinalIncrease = nil,
    RPG_Heal = greater_zero,
    RPG_Health = greater_zero,
    RPG_SkillSp = function(value, pm) return max(-1490, min(value, 3000)) end,
    RPG_AtkSp = function(value, pm) return max(-990, min(value, 2000)) end,
    RPG_Sp = greater_speed,
    RPG_Dist = nil,
    RPG_Radius = function (value, pm)
        return max(RPG_ENTITY_RADIUS, value)
    end,
    RPG_Anger = function(value, pm) return max(0, min(value, pm.RPG_AngerMax)) end,
    -- RPG_AngerSp = greater_zero,
    RPG_AngerHit = greater_zero,
    RPG_AngerKill = greater_zero,
}

RPG_BATTLE_PROPERTY_SOURCE = {
    RPG_HpMax = "RPG_Hp",
    -- RPG_Hp = "RPG_HpMax",
    -- RPG_AngerMax = "RPG_Anger",
    -- RPG_Status = "0",
}

-------------------------- 1 一帧同步一次 通过 PROPS_CHANGED
-------------------------- 2 实时同步 通过 PROP_CHANGE
RPG_BATTLE_PROPERTY_SYN = {
    RPG_Hp = 1,
    RPG_HpMax = 1,
    RPG_Anger = 1,
    RPG_AngerMax = 1,
    RPG_DIR_X = 1,
    RPG_DIR_Y = 1,
    RPG_Shield = 1,
    RPG_DIR = 1,

    -- RPG_AngerSp = 1,
    --RPG_Status = 1,
}


RPG_PROP_ORDER = {}
for i, prop in pairs(RPG_PROPERTY) do
    RPG_PROP_ORDER[prop] = i
end

-- RPG_PROP_TICK = {
--     "RPG_Hp",
--     "RPG_Hp",
-- }

table.sort(RPG_PROP_ORDER, function(a,b)
    return RPG_PROPERTY[a] < RPG_PROPERTY[b]
end)


RPG_TEAM_ID = {
    TEAM_1 = 1,
    TEAM_2 = 2,
    TEAM_3 = 3,--中立
}

RPG_DAMAGE_TYPE = {
    DAMAGE = bit.lshift(1, 0), ------物理伤害
    MAGIC = bit.lshift(1, 1), ------魔法伤害
    REAL = bit.lshift(1, 2), ------真实伤害
    CRIT = bit.lshift(1, 4), ------是否暴击
    BLOCK = bit.lshift(1, 5), ------是否格挡
    HEAL = bit.lshift(1, 6), ------是否是治疗
    MISS = bit.lshift(1, 7), ------是否闪避
    SHARE = bit.lshift(1, 8), ------是否是share伤害
}

RPG_DAMAGE_TYPE_SHARE_BIT = bit.bor(RPG_DAMAGE_TYPE.REAL, RPG_DAMAGE_TYPE.SHARE)

RPG_BASE_ACCURACY = 100 ---基础命中率
RPG_BASE_CRIT_ENHANCE = 2 ---基础爆伤
RPG_BASE_BLOCK = 0.5 ---基础爆伤

RPG_ENTITY_RADIUS = 500
RPG_ENTITY_RADIUS2 = 1500
RPG_GRID_SIZE = 1000
RPG_RELIVE_DELAY = 500

RPG_KILL_ANGER = 200 * 1000 ---击杀回怒

RPG_TARGET_TYPE = {
    SELF = 1, --己方
    ENEMY = 2, --敌方
}

RPG_TARGET_POS_DIR = {
    TARGET = 1, --缺省 不偏移
    FRONT = 2, --身前
    BACK = 3, --身后
}

RPG_FORCE_MOVE_TYPE = {
    CASTER_TO_TARGET_DIR = 1, ----面朝释放者反朝向 
    CASTER_DIR = 2, ----释放者朝向 
    MOVE_TO_TARGET_POS = 3, -----移动到目标位置
    CASTER_POS = 4, -----强制目标位移到目标位置  (勾人技能)
    TANGENT_DIR = 5, ----释放者朝向的切角方向 
}

RPG_SHARE_DAMAGE_TYPE = {
    SHARE = 1, --大家share受到伤害    {1,    释放者受到比例的比例}
    TRANSFER = 2, --施法者受到伤害 转移一部分由其他人承担
    GUARD = 3, --施法者代替 其他人承担部分伤害
}

RPG_POS_TYPE = {
    CASTER = 1, --施法者位置 {1, RPG_TARGET_POS_DIR} !!!!buff中 caster 处理成buff携带者的位置 而不是施法者位置，因为在此之前没有RPG_POS_TYPE.ACTOR类型
    NEAREST = 2, --最近单位 {2, RPG_TARGET_POS_DIR}
    FPOS = 3, --对位
    HP_PERRCENT_MIN = 4, --生命百分比最低
    FARTHEST = 5, --最远距离
    ACTOR = 6, --effect_actor 位置，要是子弹打出的效果，就是子弹的位置， 要是buff效果，就是buff携带者的位置， 要是技能效果，就是技能释放者的位置
    EVENT_TARGET = 7,  ------------事件的目标
    EVENT_CASTER = 8, -------------事件的发起者
    FPOS_1 = 101, --站位位置1
    FPOS_2 = 102, --站位位置2
    FPOS_3 = 103, --站位位置3
    FPOS_4 = 104, --站位位置4
    FPOS_5 = 105, --站位位置5
    FPOS_6 = 106, --站位位置6
    FPOS_7 = 107, --站位位置7
    FPOS_8 = 108, --站位位置8
    FPOS_9 = 109, --站位位置9
    FPOS_COUNT = 9,

    NEAREST_CAN_SELECTED = 999, --最近可选单位
    -- POS = 105,
}
RPG_POS_DEFAULT = RPG_POS_TYPE.NEAREST
RPG_ORIENT_DEFAULT = {x=0,y=0,dir_x=0,dir_y=1}--默认方位

RPG_RANGE_TYPE = {
    --ONE = 1,  --单体目标 配空 或者 {1}
    CIRCLE = 2, --圆形范围 {2， 半径}
    RECT = 3, --矩形范围 {3, 长, 宽}
    SECTOR = 4, --圆形范围 {4，角度, 半径}
    ALL = 5,  --所有目标 {5}
    ROW_FRONT = 11, --前排 {11}
    ROW_BACK = 12, --后排 {12}
}

RPG_BULLET_TYPE = {
    TARGET = 1, --指向性攻击无弹道 {1, {速度}, 结束效果}
    LINE = 2, -- 直线 {2, {速度，[{形状, 形状参数}]}, 击中效果, 结束效果}
    PARABOLA = 3, --抛物线 {3, {水平速度, 抛物线高度}， 结束效果}
    CHAIN = 4, --链式攻击 {4, {弹射速度, 次数}，击中效果}
    AMPLIFY = 5, --范围放大 {5, {范围参数}, 放大时间, 初始比例}, nil, 击中效果}
    -- CIRCLE = 6, --圆形放大
    -- SECTOR = 7, --扇形放大
}

RPG_RACE_BUFF_TYPE = {
    five = 1, -- 5个同种族
    four = 2, -- 4个同种族
    three_two = 3, -- 3 + 2
    three = 4, -- 3个同种族
    empty = 5
}

RPG_LIST_REMOVE = function(LIST, item)
    local tail = #LIST
    for i = tail, 1, -1 do
        if LIST[i] == item then
            LIST[i] = LIST[tail]
            LIST[tail] = nil
            return
        end
    end
end

-- RPG_RANGE_TYPE = {
--     ENEMY_NEAREST = 1, --最近敌人
--     ENEMY_ROW_FRONT = 2, --敌方前排
--     ENEMY_ROW_BACK = 3,--敌方后排
--     ENEMY_LAST_HIT_ME = 4,--上次打我
--     ENEMY_LAST_HIT = 5,--上次我打
--     ENEMY_ALL = 6,
--     SELF = 7,
--     ROW_FRONT = 8,
--     ROW_BACK = 9,
--     SELF_ALL = 10,

--     CIRCLE = 10, --以自己为圆心
--     RECT = 11,
-- }


_RPG_FIXED_UPDATE_SEQ = {
    "battle_fixed_update",
    "anger_skill",
    "controller_fixed_update",
    "battle_post_update"
}

_RPG_FIXED_UPDATE_MAP = {}
for k,v in ipairs(_RPG_FIXED_UPDATE_SEQ) do
    _RPG_FIXED_UPDATE_MAP[v] = k
end

local function error_hander(h)
    RPG_ERR(string.format("lua:%s \r\n %s", h, debug.traceback()))
end
function RPG_SAVE_CALL(f, ...)
    return xpcall(f, error_hander, ...)
end

table.clone = table.clone or table.copy


function into_rpg_attr(eftype, val)
    local conf = resmng.prop_effect_type[eftype]
    if conf and conf.RPGType then
        return val * conf.RPGType
    else
        return val
    end
end

function from_rpg_attr(eftype, val)
    local conf = resmng.prop_effect_type[eftype]
    if conf and conf.RPGType then
        return val / conf.RPGType
    else
        return val
    end
end

-- Hx@2023-08-12: 队伍最大位置
RPG_MAX_FORMATION_POS = 5
